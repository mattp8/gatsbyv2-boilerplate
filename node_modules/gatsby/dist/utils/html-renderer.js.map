{"version":3,"sources":["../../src/utils/html-renderer.js"],"names":["Queue","require","fs","path","generatePathToOutput","outputPath","outputFileName","replace","test","join","process","cwd","module","exports","htmlComponentRenderer","pages","Promise","resolve","reject","queue","callback","default","throwAway","htmlString","outputFile","then","e","concurrent","forEach","page","push","on"],"mappings":";;AAAA,MAAMA,QAAQC,QAAS,cAAT,CAAd;;AACA,MAAMC,KAAKD,QAAS,UAAT,CAAX;;AACA,MAAME,OAAOF,QAAS,MAAT,CAAb,C,CAEA;;;AACA,MAAMG,uBAAuBC,cAAc;AACzC,MAAIC,iBAAiBD,WAAWE,OAAX,CAAmB,UAAnB,EAAgC,EAAhC,CAArB,CADyC,CACe;;AAExD,MAAI,CAAC,cAAcC,IAAd,CAAmBF,cAAnB,CAAL,EAAyC;AACvCA,qBAAiBH,KAAKM,IAAL,CAAUH,cAAV,EAA2B,YAA3B,CAAjB;AACD;;AAED,SAAOH,KAAKM,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAA0B,QAA1B,EAAmCL,cAAnC,CAAP;AACD,CARD;;AAUAM,OAAOC,OAAP,GAAiB,CAACC,qBAAD,EAAwBC,KAAxB,KACf,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,QAAQ,IAAInB,KAAJ,CACZ,CAACG,IAAD,EAAOiB,QAAP,KAAoB;AAClB,QAAI;AACFN,4BAAsBO,OAAtB,CAA8BlB,IAA9B,EAAoC,CAACmB,SAAD,EAAYC,UAAZ,KAA2B;AAC7DrB,WAAGsB,UAAH,CAAcpB,qBAAqBD,IAArB,CAAd,EAA0CoB,UAA1C,EAAsDE,IAAtD,CAA2D,MAAM;AAC/DL;AACD,SAFD;AAGD,OAJD;AAKD,KAND,CAME,OAAOM,CAAP,EAAU;AACVR,aAAOQ,CAAP;AACD;AACF,GAXW,EAYZ;AACEC,gBAAY;AADd,GAZY,CAAd;AAiBAZ,QAAMa,OAAN,CAAcC,QAAQ;AACpBV,UAAMW,IAAN,CAAWD,IAAX;AACD,GAFD;AAIAV,QAAMY,EAAN,CAAU,OAAV,EAAkB,MAAM;AACtBd;AACD,GAFD;AAGD,CAzBD,CADF","sourcesContent":["const Queue = require(`better-queue`)\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\n\n// copied from https://github.com/markdalgleish/static-site-generator-webpack-plugin/blob/master/index.js#L161\nconst generatePathToOutput = outputPath => {\n  let outputFileName = outputPath.replace(/^(\\/|\\\\)/, ``) // Remove leading slashes for webpack-dev-server\n\n  if (!/\\.(html?)$/i.test(outputFileName)) {\n    outputFileName = path.join(outputFileName, `index.html`)\n  }\n\n  return path.join(process.cwd(), `public`, outputFileName)\n}\n\nmodule.exports = (htmlComponentRenderer, pages) =>\n  new Promise((resolve, reject) => {\n    const queue = new Queue(\n      (path, callback) => {\n        try {\n          htmlComponentRenderer.default(path, (throwAway, htmlString) => {\n            fs.outputFile(generatePathToOutput(path), htmlString).then(() => {\n              callback()\n            })\n          })\n        } catch (e) {\n          reject(e)\n        }\n      },\n      {\n        concurrent: 20,\n      }\n    )\n\n    pages.forEach(page => {\n      queue.push(page)\n    })\n\n    queue.on(`drain`, () => {\n      resolve()\n    })\n  })\n"],"file":"html-renderer.js"}