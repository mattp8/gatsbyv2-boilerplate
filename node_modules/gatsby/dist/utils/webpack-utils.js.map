{"version":3,"sources":["../../src/utils/webpack-utils.js"],"names":["os","require","autoprefixer","flexbugs","UglifyPlugin","MiniCssExtractPlugin","builtinPlugins","createBabelConfig","eslintConfig","module","exports","stage","program","assetRelativeRoot","vendorRegex","supportedBrowsers","browserlist","PRODUCTION","includes","babelConfig","makeExternalOnly","original","options","rule","include","makeInternalOnly","exclude","ident","loaders","json","loader","resolve","yaml","null","raw","style","miniCssExtract","css","minimize","sourceMap","camelCase","localIdentName","postcss","plugins","browsers","postcssOpts","flexbox","file","name","url","limit","js","eslint","schema","imports","rules","test","use","enforce","fonts","images","audioVideo","importLoaders","internal","external","cssModules","modules","uglify","uglifyOptions","cache","parallel","cpus","length","compress","drop_console","ecma","ie8","extractText","filename","chunkFilename","moment","ignore"],"mappings":"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","sourcesContent":["// @flow\nconst os = require(`os`)\n\nconst autoprefixer = require(`autoprefixer`)\nconst flexbugs = require(`postcss-flexbugs-fixes`)\nconst UglifyPlugin = require(`uglifyjs-webpack-plugin`)\nconst MiniCssExtractPlugin = require(`mini-css-extract-plugin`)\n\nconst builtinPlugins = require(`./webpack-plugins`)\nconst { createBabelConfig } = require(`./babel-config`)\nconst eslintConfig = require(`./eslint-config`)\n\ntype LoaderSpec = string | { loader: string, options?: Object }\ntype LoaderResolver<T: Object> = (options?: T) => LoaderSpec\n\ntype Condition = string | RegExp | RegExp[]\n\ntype Rule = {\n  test?: Condition,\n  use: LoaderSpec[],\n  exclude?: Condition,\n  include?: Condition,\n}\n\ntype RuleFactory<T: Object> = (options?: T) => Rule\n\ntype ContextualRuleFactory = RuleFactory<*> & {\n  internal: RuleFactory<*>,\n  external: RuleFactory<*>,\n}\n\ntype PluginInstance = any\ntype PluginFactory = (...args?: any) => PluginInstance\n\ntype BuiltinPlugins = typeof builtinPlugins\n\ntype Stage = \"develop\" | \"develop-html\" | \"build-javascript\" | \"build-html\"\n\n/**\n * Configuration options for `createUtils`\n */\nexport type WebpackUtilsOptions = { stage: Stage, program: any }\n\n/**\n * Utils that produce webpack `loader` objects\n */\nexport type LoaderUtils = {\n  json: LoaderResolver<*>,\n  yaml: LoaderResolver<*>,\n  null: LoaderResolver<*>,\n  raw: LoaderResolver<*>,\n\n  style: LoaderResolver<*>,\n  css: LoaderResolver<*>,\n  postcss: LoaderResolver<{\n    browsers?: string[],\n    plugins?: Array<any> | ((loader: any) => Array<any>),\n  }>,\n\n  file: LoaderResolver<*>,\n  url: LoaderResolver<*>,\n  js: LoaderResolver<*>,\n\n  imports: LoaderResolver<*>,\n  exports: LoaderResolver<*>,\n\n  eslint: LaoderResolver<*>,\n}\n\n/**\n * Utils that prodcue webpack rule objects\n */\nexport type RuleUtils = {\n  /**\n   * Handles Javascript compilation via babel\n   */\n  js: RuleFactory<*>,\n  yaml: RuleFactory<*>,\n  fonts: RuleFactory<*>,\n  images: RuleFactory<*>,\n  audioVideo: RuleFactory<*>,\n\n  css: ContextualRuleFactory,\n  cssModules: RuleFactory<*>,\n  postcss: ContextualRuleFactory,\n\n  eslint: RuleFactory<*>,\n}\n\nexport type PluginUtils = BuiltinPlugins & {\n  extractText: PluginFactory,\n  uglify: PluginFactory,\n  moment: PluginFactory,\n}\n\n/**\n * webpack atoms namespace\n */\nexport type WebpackUtils = {\n  loaders: LoaderUtils,\n\n  rules: RuleUtils,\n\n  plugins: PluginUtils,\n}\n\n/**\n * A factory method that produces an atoms namespace\n */\nmodule.exports = async ({\n  stage,\n  program,\n}: {\n  stage: Stage,\n  program: any,\n}): Promise<WebpackUtilsOptions> => {\n  const assetRelativeRoot = `static/`\n  const vendorRegex = /(node_modules|bower_components)/\n  const supportedBrowsers = program.browserlist\n\n  const PRODUCTION = !stage.includes(`develop`)\n\n  const babelConfig = await createBabelConfig(program, stage)\n\n  const makeExternalOnly = (original: RuleFactory<*>) => (\n    options = {}\n  ): Rule => {\n    let rule = original(options)\n    rule.include = vendorRegex\n    return rule\n  }\n\n  const makeInternalOnly = (original: RuleFactory<*>) => (\n    options = {}\n  ): Rule => {\n    let rule = original(options)\n    rule.exclude = vendorRegex\n    return rule\n  }\n\n  let ident = 0\n\n  const loaders: LoaderUtils = {\n    json: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`json-loader`),\n      }\n    },\n\n    yaml: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`yaml-loader`),\n      }\n    },\n\n    null: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`null-loader`),\n      }\n    },\n\n    raw: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`raw-loader`),\n      }\n    },\n\n    style: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`style-loader`),\n      }\n    },\n\n    miniCssExtract: (options = {}) => {\n      return {\n        options,\n        // use MiniCssExtractPlugin only on production builds\n        loader: PRODUCTION\n          ? stage === `build-html`\n            ? require.resolve(`./webpack-extract-css-modules-map`)\n            : MiniCssExtractPlugin.loader\n          : require.resolve(`style-loader`),\n      }\n    },\n\n    css: (options = {}) => {\n      return {\n        loader: require.resolve(`css-loader`),\n        options: {\n          minimize: PRODUCTION,\n          sourceMap: !PRODUCTION,\n          camelCase: `dashesOnly`,\n          // https://github.com/webpack-contrib/css-loader/issues/406\n          localIdentName: `[name]--[local]--[hash:base64:5]`,\n          ...options,\n        },\n      }\n    },\n\n    postcss: (options = {}) => {\n      let { plugins, browsers = supportedBrowsers, ...postcssOpts } = options\n\n      return {\n        loader: require.resolve(`postcss-loader`),\n        options: {\n          ident: `postcss-${++ident}`,\n          sourceMap: !PRODUCTION,\n          plugins: loader => {\n            plugins =\n              (typeof plugins === `function` ? plugins(loader) : plugins) || []\n\n            return [\n              flexbugs,\n              autoprefixer({ browsers, flexbox: `no-2009` }),\n              ...plugins,\n            ]\n          },\n          ...postcssOpts,\n        },\n      }\n    },\n\n    file: (options = {}) => {\n      return {\n        loader: require.resolve(`url-loader`),\n        options: {\n          name: `${assetRelativeRoot}[name]-[hash].[ext]`,\n          ...options,\n        },\n      }\n    },\n\n    url: (options = {}) => {\n      return {\n        loader: require.resolve(`url-loader`),\n        options: {\n          limit: 10000,\n          name: `${assetRelativeRoot}[name]-[hash].[ext]`,\n          ...options,\n        },\n      }\n    },\n\n    js: (options = babelConfig) => {\n      return {\n        options,\n        loader: require.resolve(`babel-loader`),\n      }\n    },\n\n    eslint: (schema = ``) => {\n      const options = eslintConfig(schema)\n\n      return {\n        options,\n        loader: require.resolve(`eslint-loader`),\n      }\n    },\n\n    imports: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`imports-loader`),\n      }\n    },\n\n    exports: (options = {}) => {\n      return {\n        options,\n        loader: require.resolve(`exports-loader`),\n      }\n    },\n  }\n\n  /**\n   * Rules\n   */\n  const rules = {}\n\n  /**\n   * Javascript loader via babel, excludes node_modules\n   */\n  {\n    let js = options => {\n      return {\n        test: /\\.jsx?$/,\n        exclude: vendorRegex,\n        use: [loaders.js(options)],\n      }\n    }\n\n    rules.js = js\n  }\n\n  {\n    let eslint = schema => {\n      return {\n        enforce: `pre`,\n        test: /\\.jsx?$/,\n        exclude: vendorRegex,\n        use: [loaders.eslint(schema)],\n      }\n    }\n\n    rules.eslint = eslint\n  }\n\n  rules.yaml = () => {\n    return {\n      test: /\\.ya?ml/,\n      use: [loaders.json(), loaders.yaml()],\n    }\n  }\n\n  /**\n   * Font loader\n   */\n  rules.fonts = () => {\n    return {\n      use: [loaders.url()],\n      test: /\\.(eot|otf|ttf|woff(2)?)(\\?.*)?$/,\n    }\n  }\n\n  /**\n   * Loads image assets, inlines images via a data URI if they are below\n   * the size threshold\n   */\n  rules.images = () => {\n    return {\n      use: [loaders.url()],\n      test: /\\.(ico|svg|jpg|jpeg|png|gif|webp)(\\?.*)?$/,\n    }\n  }\n\n  /**\n   * Loads audio or video assets\n   */\n  rules.audioVideo = () => {\n    return {\n      use: [loaders.file()],\n      test: /\\.(mp4|webm|wav|mp3|m4a|aac|oga|flac)$/,\n    }\n  }\n\n  /**\n   * CSS style loader.\n   */\n  {\n    const css = ({ browsers, ...options } = {}) => {\n      return {\n        test: /\\.css$/,\n        use: [\n          loaders.miniCssExtract(),\n          loaders.css({ ...options, importLoaders: 1 }),\n          loaders.postcss({ browsers }),\n        ],\n      }\n    }\n\n    /**\n     * CSS style loader, _excludes_ node_modules.\n     */\n    css.internal = makeInternalOnly(css)\n    css.external = makeExternalOnly(css)\n\n    const cssModules = options => {\n      const rule = css({ ...options, modules: true })\n      delete rule.exclude\n      rule.test = /\\.module\\.css$/\n      return rule\n    }\n\n    rules.css = css\n    rules.cssModules = cssModules\n  }\n\n  /**\n   * PostCSS loader.\n   */\n  {\n    const postcss = options => {\n      return {\n        test: /\\.css$/,\n        use: [loaders.css({ importLoaders: 1 }), loaders.postcss(options)],\n      }\n    }\n\n    /**\n     * PostCSS loader, _excludes_ node_modules.\n     */\n    postcss.internal = makeInternalOnly(postcss)\n    postcss.external = makeExternalOnly(postcss)\n    rules.postcss = postcss\n  }\n  /**\n   * Plugins\n   */\n  const plugins = { ...builtinPlugins }\n\n  /**\n   * Minify javascript code without regard for IE8. Attempts\n   * to parallelize the work to save time. Generally only add in Production\n   */\n  plugins.uglify = ({ uglifyOptions, ...options } = {}) =>\n    new UglifyPlugin({\n      cache: true,\n      parallel: os.cpus().length - 1,\n      exclude: /\\.min\\.js/,\n      sourceMap: true,\n      uglifyOptions: {\n        compress: {\n          drop_console: true,\n        },\n        ecma: 8,\n        ie8: false,\n        ...uglifyOptions,\n      },\n      ...options,\n    })\n\n  /**\n   * Extracts css requires into a single file;\n   * includes some reasonable defaults\n   */\n  plugins.extractText = options =>\n    new MiniCssExtractPlugin({\n      filename: `[name].[contenthash].css`,\n      chunkFilename: `[name].[contenthash].css`,\n      ...options,\n    })\n\n  plugins.moment = () => plugins.ignore(/^\\.\\/locale$/, /moment$/)\n\n  return {\n    loaders,\n    rules: (rules: RuleUtils),\n    plugins: (plugins: PluginUtils),\n  }\n}\n"],"file":"webpack-utils.js"}