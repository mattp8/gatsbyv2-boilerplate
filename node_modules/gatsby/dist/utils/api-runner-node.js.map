{"version":3,"sources":["../../src/utils/api-runner-node.js"],"names":["Promise","require","glob","_","mapSeries","reporter","cache","apiList","createNodeId","boundPluginActionCreators","doubleBind","boundActionCreators","api","plugin","traceId","name","keys","Object","doubleBoundActionCreators","i","length","key","boundActionCreator","args","runAPI","pathPrefix","store","emitter","loadNodeContent","getNodes","getNode","hasNodeChanged","getNodeAndSavePathDependency","getState","program","prefixPaths","config","namespacedCreateNodeId","id","gatsbyNode","resolve","apiCallArgs","actions","pluginOptions","fromCallback","callback","result","filteredPlugins","hasAPIFile","sync","apisRunning","waitingForCasacadeToFinish","module","exports","pluginSource","error","process","exit","plugins","flattenedPlugins","filter","noSourcePluginPlugins","p","apiRunInstance","startTime","Date","toJSON","waitForCascadingActions","push","pluginName","asCallback","err","results","env","NODE_ENV","panic","runner","emit","isEmpty","instance","some","a"],"mappings":"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","sourcesContent":["const Promise = require(`bluebird`)\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\n\nconst mapSeries = require(`async/mapSeries`)\n\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst cache = require(`./cache`)\nconst apiList = require(`./api-node-docs`)\nconst createNodeId = require(`./create-node-id`)\n\n// Bind action creators per plugin so we can auto-add\n// metadata to actions they create.\nconst boundPluginActionCreators = {}\nconst doubleBind = (boundActionCreators, api, plugin, { traceId }) => {\n  if (boundPluginActionCreators[plugin.name + api + traceId]) {\n    return boundPluginActionCreators[plugin.name + api + traceId]\n  } else {\n    const keys = Object.keys(boundActionCreators)\n    const doubleBoundActionCreators = {}\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      const boundActionCreator = boundActionCreators[key]\n      if (typeof boundActionCreator === `function`) {\n        doubleBoundActionCreators[key] = (...args) => {\n          // Let action callers override who the plugin is. Shouldn't be\n          // used that often.\n          if (args.length === 1) {\n            boundActionCreator(args[0], plugin, traceId)\n          } else if (args.length === 2) {\n            boundActionCreator(args[0], args[1], traceId)\n          }\n        }\n      }\n    }\n    boundPluginActionCreators[\n      plugin.name + api + traceId\n    ] = doubleBoundActionCreators\n    return doubleBoundActionCreators\n  }\n}\n\nconst runAPI = (plugin, api, args) => {\n  let pathPrefix = ``\n  const {\n    store,\n    emitter,\n    loadNodeContent,\n    getNodes,\n    getNode,\n    hasNodeChanged,\n    getNodeAndSavePathDependency,\n  } = require(`../redux`)\n  const { boundActionCreators } = require(`../redux/actions`)\n\n  const doubleBoundActionCreators = doubleBind(\n    boundActionCreators,\n    api,\n    plugin,\n    args\n  )\n\n  if (store.getState().program.prefixPaths) {\n    pathPrefix = store.getState().config.pathPrefix\n  }\n\n  const namespacedCreateNodeId = id => createNodeId(id, plugin.name)\n\n  const gatsbyNode = require(`${plugin.resolve}/gatsby-node`)\n  if (gatsbyNode[api]) {\n    const apiCallArgs = [\n      {\n        ...args,\n        pathPrefix,\n        boundActionCreators: doubleBoundActionCreators,\n        actions: doubleBoundActionCreators,\n        loadNodeContent,\n        store,\n        emitter,\n        getNodes,\n        getNode,\n        hasNodeChanged,\n        reporter,\n        getNodeAndSavePathDependency,\n        cache,\n        createNodeId: namespacedCreateNodeId,\n      },\n      plugin.pluginOptions,\n    ]\n\n    // If the plugin is using a callback use that otherwise\n    // expect a Promise to be returned.\n    if (gatsbyNode[api].length === 3) {\n      return Promise.fromCallback(callback =>\n        gatsbyNode[api](...apiCallArgs, callback)\n      )\n    } else {\n      const result = gatsbyNode[api](...apiCallArgs)\n      return Promise.resolve(result)\n    }\n  }\n\n  return null\n}\n\nlet filteredPlugins\nconst hasAPIFile = plugin => glob.sync(`${plugin.resolve}/gatsby-node*`)[0]\n\nlet apisRunning = []\nlet waitingForCasacadeToFinish = []\n\nmodule.exports = async (api, args = {}, pluginSource) =>\n  new Promise(resolve => {\n    // Check that the API is documented.\n    if (!apiList[api]) {\n      reporter.error(`api: \"${api}\" is not a valid Gatsby api`)\n      process.exit()\n    }\n\n    const { store } = require(`../redux`)\n    const plugins = store.getState().flattenedPlugins\n    // Get the list of plugins that implement gatsby-node\n    if (!filteredPlugins) {\n      filteredPlugins = plugins.filter(plugin => hasAPIFile(plugin))\n    }\n\n    // Break infinite loops.\n    // Sometimes a plugin will implement an API and call an\n    // action which will trigger the same API being called.\n    // \"onCreatePage\" is the only example right now.\n    // In these cases, we should avoid calling the originating plugin\n    // again.\n    let noSourcePluginPlugins = filteredPlugins\n    if (pluginSource) {\n      noSourcePluginPlugins = filteredPlugins.filter(\n        p => p.name !== pluginSource\n      )\n    }\n\n    const apiRunInstance = {\n      api,\n      args,\n      pluginSource,\n      resolve,\n      startTime: new Date().toJSON(),\n      traceId: args.traceId,\n    }\n\n    if (args.waitForCascadingActions) {\n      waitingForCasacadeToFinish.push(apiRunInstance)\n    }\n\n    apisRunning.push(apiRunInstance)\n\n    let pluginName = null\n    mapSeries(\n      noSourcePluginPlugins,\n      (plugin, callback) => {\n        if (plugin.name === `default-site-plugin`) {\n          pluginName = `gatsby-node.js`\n        } else {\n          pluginName = `Plugin ${plugin.name}`\n        }\n        Promise.resolve(runAPI(plugin, api, args)).asCallback(callback)\n      },\n      (err, results) => {\n        if (err) {\n          if (process.env.NODE_ENV === `production`) {\n            return reporter.panic(`${pluginName} returned an error`, err)\n          }\n          return reporter.error(`${pluginName} returned an error`, err)\n        }\n        // Remove runner instance\n        apisRunning = apisRunning.filter(runner => runner !== apiRunInstance)\n\n        if (apisRunning.length === 0) {\n          const { emitter } = require(`../redux`)\n          emitter.emit(`API_RUNNING_QUEUE_EMPTY`)\n        }\n\n        // Filter empty results\n        apiRunInstance.results = results.filter(result => !_.isEmpty(result))\n\n        // Filter out empty responses and return if the\n        // api caller isn't waiting for cascading actions to finish.\n        if (!args.waitForCascadingActions) {\n          resolve(apiRunInstance.results)\n        }\n\n        // Check if any of our waiters are done.\n        return (waitingForCasacadeToFinish = waitingForCasacadeToFinish.filter(\n          instance => {\n            // If none of its trace IDs are running, it's done.\n            if (!_.some(apisRunning, a => a.traceId === instance.traceId)) {\n              instance.resolve(instance.results)\n              return false\n            } else {\n              return true\n            }\n          }\n        ))\n      }\n    )\n  })\n"],"file":"api-runner-node.js"}