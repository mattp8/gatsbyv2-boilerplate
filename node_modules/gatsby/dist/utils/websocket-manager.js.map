{"version":3,"sources":["../../src/utils/websocket-manager.js"],"names":["path","require","store","fs","getCachedPageData","pagePath","directory","getState","jsonDataPaths","pages","page","find","p","dataPath","jsonName","undefined","filePath","join","result","JSON","parse","readFileSync","getRoomNameFromPath","WebsocketManager","constructor","isInitialised","activePaths","Set","pageResults","Map","staticQueryResults","websocket","programDir","init","bind","getSocket","emitPageData","emitStaticQueryData","server","on","s","activePath","forEach","id","send","type","payload","leaveRoom","leave","leftRoom","sockets","adapter","rooms","length","delete","add","has","get","set","data","manager","module","exports"],"mappings":"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","sourcesContent":["const path = require(`path`)\nconst { store } = require(`../redux`)\nconst fs = require(`fs`)\n\nconst getCachedPageData = (pagePath, directory) => {\n  const { jsonDataPaths, pages } = store.getState()\n  const page = pages.find(p => p.path === pagePath)\n  const dataPath = jsonDataPaths[page.jsonName]\n  if (typeof dataPath === `undefined`) return undefined\n  const filePath = path.join(\n    directory,\n    `public`,\n    `static`,\n    `d`,\n    `${dataPath}.json`\n  )\n  const result = JSON.parse(fs.readFileSync(filePath, `utf-8`))\n  return {\n    result,\n    path: pagePath,\n  }\n}\n\nconst getRoomNameFromPath = path => `path-${path}`\n\nclass WebsocketManager {\n  constructor() {\n    this.isInitialised = false\n    this.activePaths = new Set()\n    this.pageResults = new Map()\n    this.staticQueryResults = new Map()\n    this.websocket\n    this.programDir\n\n    this.init = this.init.bind(this)\n    this.getSocket = this.getSocket.bind(this)\n    this.emitPageData = this.emitPageData.bind(this)\n    this.emitStaticQueryData = this.emitStaticQueryData.bind(this)\n  }\n\n  init({ server, directory }) {\n    this.programDir = directory\n    this.websocket = require(`socket.io`)(server)\n\n    this.websocket.on(`connection`, s => {\n      let activePath = null\n\n      // Send already existing static query results\n      this.staticQueryResults.forEach((result, id) => {\n        this.websocket.send({\n          type: `staticQueryResult`,\n          payload: { id, result },\n        })\n      })\n      this.pageResults.forEach((result, path) => {\n        this.websocket.send({\n          type: `pageQueryResult`,\n          payload: result,\n        })\n      })\n\n      const leaveRoom = path => {\n        s.leave(getRoomNameFromPath(path))\n        const leftRoom = this.websocket.sockets.adapter.rooms[\n          getRoomNameFromPath(path)\n        ]\n        if (!leftRoom || leftRoom.length === 0) {\n          this.activePaths.delete(path)\n        }\n      }\n\n      s.on(`registerPath`, path => {\n        s.join(getRoomNameFromPath(path))\n        activePath = path\n        this.activePaths.add(path)\n\n        if (this.pageResults.has(path)) {\n          this.websocket.send({\n            type: `pageQueryResult`,\n            payload: this.pageResults.get(path),\n          })\n        } else {\n          const result = getCachedPageData(path, this.programDir)\n          this.pageResults.set(path, result)\n          this.websocket.send({\n            type: `pageQueryResult`,\n            payload: this.pageResults.get(path),\n          })\n        }\n      })\n\n      s.on(`disconnect`, s => {\n        leaveRoom(activePath)\n      })\n\n      s.on(`unregisterPath`, path => {\n        leaveRoom(path)\n      })\n    })\n\n    this.isInitialised = true\n  }\n\n  getSocket() {\n    return this.isInitialised && this.websocket\n  }\n\n  emitStaticQueryData(data) {\n    this.staticQueryResults.set(data.id, data.result)\n    if (this.isInitialised) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n    }\n  }\n  emitPageData(data) {\n    if (this.isInitialised) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n    }\n    this.pageResults.set(data.id, data)\n  }\n}\n\nconst manager = new WebsocketManager()\n\nmodule.exports = manager\n"],"file":"websocket-manager.js"}